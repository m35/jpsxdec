/*
 * jPSXdec: PlayStation 1 Media Decoder/Converter in Java
 * Copyright (C) 2007-2011  Michael Sabin
 * All rights reserved.
 *
 * Redistribution and use of the jPSXdec code or any derivative works are
 * permitted provided that the following conditions are met:
 *
 *  * Redistributions may not be sold, nor may they be used in commercial
 *    or revenue-generating business activities.
 *
 *  * Redistributions that are modified from the original source must
 *    include the complete source code, including the source code for all
 *    components used by a binary built from the modified sources. However, as
 *    a special exception, the source code distributed need not include
 *    anything that is normally distributed (in either source or binary form)
 *    with the major components (compiler, kernel, and so on) of the operating
 *    system on which the executable runs, unless that component itself
 *    accompanies the executable.
 *
 *  * Redistributions must reproduce the above copyright notice, this list
 *    of conditions and the following disclaimer in the documentation and/or
 *    other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package jpsxdec.discitems.savers;

import java.awt.Graphics;
import java.awt.image.BufferedImage;
import javax.swing.JToggleButton.ToggleButtonModel;
import jpsxdec.tim.Tim;

public class TimPaletteSelector extends javax.swing.JPanel {
    
    private final Tim _tim;
    private final int _iPalette;
    private final TimSaverBuilder _writerBuilder;
    private final Mod _btnModel = new Mod();
    
    /** Creates new form TIMPaletteCheck */
    public TimPaletteSelector(Tim bi, int iPalette, TimSaverBuilder builder) {
        initComponents();
        
        _tim = bi;
        _iPalette = iPalette;
        _guiPalChk.setText(Integer.toString(iPalette));
        _writerBuilder = builder;

        _guiPalChk.setModel(_btnModel);
    }

    @Override
    protected void paintChildren(Graphics g) {
        int iWidth = this.getWidth() - 4;
        int iHeight = this.getHeight() - 4;
        
        double dblHScale = iWidth / (double)_tim.getWidth();
        double dblVScale = iHeight / (double)_tim.getHeight();
        
        double dblScale;
        if (dblHScale < dblVScale)
            dblScale = dblHScale;
        else
            dblScale = dblVScale;
        
        if (dblScale > 2) dblScale = 2;
        
        iWidth = (int)(_tim.getWidth() * dblScale);
        iHeight = (int)(_tim.getHeight() * dblScale);

        BufferedImage bi = _tim.toBufferedImage(_iPalette);

        g.drawImage(bi, 1, 1, iWidth, iHeight, null);
        
        super.paintChildren(g);
    }

    void setChecked(boolean b) {
        _guiPalChk.getModel().setSelected(b);
    }
    
    public boolean getChecked() {
        return _guiPalChk.getModel().isSelected();
    }
    
    private class Mod extends ToggleButtonModel {

        @Override
        public void setSelected(boolean b) {
            super.setSelected(b);
            _writerBuilder.setSavePalette(_iPalette, b);
        }

        @Override
        public boolean isSelected() {
            return _writerBuilder.getSavePalette(_iPalette);
        }

        public void stateChanged() {
            super.setSelected(_writerBuilder.getSavePalette(_iPalette));
        }
    }

    public void stateChanged() {
        _btnModel.stateChanged();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _guiPalChk = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        _guiPalChk.setSelected(true);
        _guiPalChk.setText("##");
        _guiPalChk.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        _guiPalChk.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        _guiPalChk.setMargin(new java.awt.Insets(0, 0, 0, 0));
        add(_guiPalChk);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox _guiPalChk;
    // End of variables declaration//GEN-END:variables
    
}
