[Key]
 *   = normal priority
 -   = normal priority sub-item
 !   = high priority
 ?   = not sure if will implement
 x   = will not implement
 //  = done
 /   = partially done
 /?/ = done?

GUI
Static reading
Hex editor
Disc item hierarchy display
Real-time player enhancements
Linux real-time player fix
Perfect decoding
Perfect encoding
Add JPSXModule.makeIndexer()

* Add ProgressListener method to indicate if it's seeking an update
* When displaying progress, setup a timer to only update the display at most every second
* Change sector identification method to use ratings
   then pick the one with the highest probability
   and report on errors
* Move fps dump into DiscItemVideo
* Display physical arrangement of disc items in some graphical form
* Introduce option to ignore errors: specifically for CD sector reading and frame uncompression
* Change index and source file handling so only the index file is used most of the time
	(index file points to source file, but can be manually specified if source file moved)
* Add -precisefps
// Optimize disc reading by reading larger chunks at a time <- is this really faster?
? Add XA format & channel consistency check
// Change back to Java 5 if possible
* write code documentation
* Start unit testing
? Add CD audio detection/extraction
? Add ECE/ECC recalculation
? Create BigFraction decoder
? Consider making IdentifiedSector just a subclass of CDSector
? add DiscItemVideo.decodeFrame(int) for quick thumbnailing
? Remove BitstreamUncompressor from plugin interface (somehow)
? Change package structure to <hosting site>.jspxdec.*
? Finish function "identifySector()" in DiscItem
  to more quickly figure out what type of sectors are read (since it won't
  have to go through the whole list of like 10 types).
* Command-line improvements
    // Change FeedbackStream to extend PrintStream, and map the default println() to NORM
    // Also add a default constructor that just uses System.out
    * Re-add option to specify output file name/location
    * Re-add decoding of bitstream and mdec files
    ! Print unused/unrecognized command-line parameters
    /?/ Restore feedback messages in new decoding pipeline
    * Change ConsoleProgressListener to accept a PrintStream
! Make things simplier/smaller...somehow
    ? Delete IdentifiedSectorRangeIterator
    * Just output to stdout and forget about piping anything
    // Remove extra IDCTs
    * Remove Yuv4mpeg2 writing
    // FF8 get rid of ShortOutputBuffer like normal XA audio decoding
    * Eliminate hardly used CD sector iterators and AdvancedIOIterator
    // Remove abstraction for raw cd sector reading
    ? Don't restrict modules from interacting when it would make things simplier
        - FF7 & Lain sector detection is best done in a certain order
        - Putting conditionals in the uncompressors where it would be clearer than subclassing
        - no longer need to remove findUncompessor() from plugins
        - can include FF7 camera data conditionals in the endocing/decoding
        - parallel disc items could better work with each other
        - tricky indexing would be easier
        - XA audio needs to know about video position for splitting
        - Alice splits audio differently from normal
        - The ISO->Video->Audio hierarhcy would be simplier
    ! Change saving qualities/formats to simply these combinations:
        - low quality, fast: integer -> avi:MJPG
        - psx exact: psx integer + blending -> avi:rgb (not in GUI)
        - bitstream and mdec img seq (not in gui)
        - ?? -> png/bmp (not jpg) img seq?
        - psx high quality, slow: psx double -> avi:yuv
    ? Only provide all the saving options on the command-line. The GUI only gets 1 or 2
! Add/finish api for selecting which parallel audio stream to decode/play
    * When printing what video is saving, also print the parallel audio item(s)
    // Identify when parallel audio streams are mutually exclusive
    // Add handling for cases where there is a break between sequential parallel audio streams
    // Move the selection of parallel audio into DemuxMovieWriterBuilder
      //Then just have DemuxMovieWriter.feedSector(IdentifiedSector) that will take care of decoding
    // Make a simplier audio format normalization for parallel audio streams in videos
        // Just normalize mono/stereo and sample rate
// Inform user if corrupted data is found while reading sectors
    ! Don't show an error on every sector (try to group them)
! Make video encoder
    // replace existing movie frames
        ? remove/merge redundant MDEC codes with AC=0 (FF7)
        ! test sector and bitstream format handling
        * add handling when partial replace detects the entire frame is different
        * Split up the partial diff detection from the actual replacing. Helpful for
          . Generating an xml with frames without changes removed
          . GUI preview would be useful to expose this info
    ? create movies from scratch
    x Fancy encoding algorithms
        x Smart chrominance sub-sampling calculation
        x Pre-anti-aliasing and Pre-blockiness reduction
        x Temporal spreading (diffusion?) of quantization error
        x Shorter VLC substitution searching
        x Trellis quantization
        x Context-adaptive variable-length coding (or is this h.264 only?)
    ? Include Cb/Cr un-swap correction option
      so videos decoded with other programs can be re-encoded with consistent coloring
    * Alternatively create an mpeg1 parser and converter
* Reimplement a GUI
    - show media list as a tree list showing all the files on the disc
      and what media belongs to what file. if not a disc image, just show
      the file name and the media it contains
    - Automatic error reporting
    ! Video saving: figure out how to graphically display parallel audio for selection
* AVI Writing
    ? add optional logic to buffer a/v data to generate cleaner interleaved files
    ? AVI PNG codec
    // AVI YUV codec (specifically fourcc YV12)
* Real-time media playback/preview
    // Abstract out the media player
	// Change thread syncing to use PipedIOStream approach
    - Make sure I'm not reusing the same buffer for all my audio streaming
    // Cleanup
    // Sync player: end of first frame with start of audio
        // Move that logic into something more independent so writer can use it too
    ! Fix it on Linux (Ubuntu) somehow
        ! Figure out how to make Linux multithreading not suck
        - Implement my own low-latency audio position tracking
	- Skip audio in the rare case it is ahead of sector reading
    // Add new state to queue: BUMP_WHEN_FULL that will empty the oldest item
    //  when full and a new item is added. This state will be enabled by the audio
    //  queue when it is empty to prevent blocking.
	- Change VideoPlayer into PlayerCanvas that also holds the progress bar and control buttons
    - Add choosing of video scaling interpolation option to api
    - Add choosing of aspect ratio to api
    - [CL] Add command-line options to pick zooming, interpolation, and aspect ratio
    ? Register listeners with the SourceDataLine and let those events pause the
      other components indirectly
    - Reduce amount of object creation/destruction so GC delays aren't ever a problem
        Current process:
            byte[] for sector data
            CDSector to wrap that +
                CDXAHeader + CodingInfo + SubMode
                    IdentifiedSector to wrap that
                    All the NotThisTypeExceptions thrown during identification
            //byte[] created by FrameDemuxer
            //DemuxImage created to hold byte[]
            //byte[] created by uncompressor
            //BufferedImage created from rgb
            AudioFormats created along the way?
Indexing
	! Static data handling
		- Searching for static demux and MDEC data
		- Finding and uncompressing lhz data, often used in PSX games
		- Re-add TIM search
    ! show error when deserialzing line has error
    * Visually populate a list as the disc/file is being indexed
	* Make indexing faster (don't use constructors to identify sector types)
    * Add in a comment what sector types were found during indexing (for debugging)
	* STR indexing: add serialized value: Precise fps:Y/N. When there's no rate variance, then it can be used for -precisefps
    * ISO indexer keeps a bit array of all sectors in the CD and flags them as mode 1/2.
      When creating the DiscItemISO9660Files, it checks if the file contains mode 2 sectors
    ? Store the index as a hierarchy?
    ? [CL] Use actual ISO filenames to identify disc items instead of just numbers
	? [CL] Find a way to serialze the suggested base name so they're all unique and may be used to refer to item to decode
	// Add some checking during index file load to stop a 600mb scan of death
	// When reading an existing index file, just print how many items were identified
	// and also print when lines have errors
	// Serialize should keep key-value pairs in the order they are added
GAME SPECIFIC:
    * More game handling
    * Soul Reaver 009:TIM is extra wide and saved as jpg looks weird (transparency?)
    * FF Chronicles has a tim file being saved as blank
    * Legend of Mana has 000:TIM with 64 palettes! One being saved all transparent?
    * Castlevania seems to have movies with lots of extra frames at the end?
    * Lain Disc 2 048:STR - End of movie has 2 audio sectors next to each other
    * Pop at end of 429:XA (FF Chron?) disc 1. Test with PsxMC
    * Lain disc1 F024.STR audio is way off for some reason
    * Simpsons Wrestling movie has a crazy fps
    * Tekken 3 has lots of 20 fps
    // Chrono Chross final movie - need to add handling for it
    // Figure out how the heck to REALLY handle variable frame rates (Alice in cyberland)
    // Super Puzzle Figher 2: First movie, last frame is split because audio sector changes format
    // Spyro indexing isn't doing XA right -> due to bad sectors

// Add more frame rate detection logic
    // Figure out why fps detects square-type movies having sectors/frame of 2
    // In case there is more than 1 possible FPS, eliminate it down to those with unique factors
    // If there are multiple unique factors, only then is there an issue
    // e.g. if [2, 5, 10] are possible FPS, both 2 and 5 are factors of 10, so they can be ignored
// Figure out why yuv coloring isn't the same as rgb
// change StrPushDemuxer to handle the rest of the demuxing logic found in StrSaver
	// each sector added could produce up to 2 frames (maybe more in the future)
	x make it more like IDiscItemAudioDecoder
// Rename UnidentiiedSector
// Rename "plugins" to "modules"
// Rename decode package to bitstreams
// Clean up listener management in DemuxMovieWriter*
// make build release ant task
// move lgpl code into separate root source folder
// put argparser source directly into repo
// Fix the super.toString() for children of UnknownData
// Add generating of silence for audio to keep in sync with video for -preciseavsync
// Remove DemuxMovieWriterBuilder.open() and PCM16bitAudioWriter.open()
//  because it's not serving any value. Rename .create*() to .createAndOpen*().
// Add option to save copied files out with cdxa header
// Change how FF7 frame camera data is treated:
//  keep it as part of the first sector and not part of the frame
// Java sometimes makes .wav files that WMP can't play?
// find new SSL SMTP lib
// Two types of listeners: Verbose feedback, and Progress
// Yuv4mpeg2 writing
    // Implement PSX YUV -> Standard YUV
    // Change Yuv4mpeg2 and MdecDecoder_double.readYuv() to use 4:2:0 subsampling.
// Display CD format details to the user
// Figure out why ISO9660 doesn't work on CD-i -> because it doesn't use ISO9660 (http://www.smart-projects.net/help.php?help=230)
// Figure out why CD-i stereo XA leaves one channel audio silent -> it's really how the data is on the disc
x Add PAL and NTSC ratio selection to yuv4mpeg2 writing.
x Allow writing stuff to stdout
    x Only yuv4mpeg2 and plain pcm?
x Raw direct CD reading from the disc drive (somehow)
x CD-i video formats
x CD track audio handling

? Find new host
	Requirements:
		* free
		? simple issue tracking (anon bug reports a plus)
		* project name in url
		* clean & simple homepage not focused on the code but on summary and downloads
		* native SVN support (not bridges)
		* 5 or more developers allowed on the project
		* syntax highlighted repo browsing
		* allows non OSI licences
	http://www.svnhostingcomparison.com/
	? assembla.com (# of users?, reasonably clean, wiki for a home page, add/remove tabs, bugs called 'tickets') e.g. http://www.assembla.com/spaces/burro
	? javaforge.com (cluttered) e.g. http://javaforge.com/project/dock
	? sharesource.org (# of users?, very simple, bug reporting without register, no code highlighting)
	? activestate.com/firefly/plans (where are the downloads?, # of users?, url is firefly.activestate.com/username/projectname) e.g. http://firefly.activestate.com/ahamino/mindreader  http://firefly.activestate.com/dafi/morekomodo
	? projectlocker.com (5 users, lots of q's to signup, unable to find a project page on site, has ads)
	? myversioncontrol.com (3 users, unable to find a project page on site)
	? bountysource.com
	x Freepository (1 user, svn ok, license ok, no issue tracking)
	x java.net (cluttered) e.g. https://jinput.dev.java.net/
	x codespaces.com (2 users, unable to find a project page on site)
	x xp-dev (project name not in url, no repo browsing)
	x codeplex (best interface, but svn please)
	x googlecode (incompatable license)
	x github (svn please)
	x bitbucket (svn please)
	x launchpad (svn please)

New code style:
    fields only preceeded with underscore '_'
    object no longer have prefix of 'o'
    don't have filename in comment before package name
    arrays of objects will still be 'ao' prefix
    primitive type objects will also still be 'io', 'blno', 'dblo' etc
    nested non-static class fields can start with double underscore '__'
    core types prefixes: long=lng int=i short=si byte=b
                         double=dbl float=flt boolean=bln enum=e
    array prefix: a<type> (e.g. int[] = ai)
