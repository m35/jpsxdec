[Key]
 *   = normal priority
 -   = normal priority sub-item
 !   = high priority
 ?   = not sure if will implement
 x   = will not implement
 //  = done
 /   = partially done
 /?/ = done?

.....................

* Verify Loggers and LogRecords and ResourceBundles, use another log system?
* Finish RbGen
* Localize Main help
* VDP null frameNumber
* Finish XA encoder
* Look into adding ErrorHandler to my Loggers
* 

Self contained
// XA replace: give better feedback what stopped the replace
* Only show dropdown button when there are list entries
* Save isofile: display output size for raw/normal
* Save/load CD name in index
* add double-click and arrow list
* add keyboard actions on rows
* Add time log msg at end of save/index
* show error/warn unused cmdline args
* Add disc opening to debug.log
* New video GUI
* Proper handling when directory box is empty
* Finish testing LoD iki: GOAST.IKI (end of disc 2), DENIN2.INI (middle of disc 3), DRAGON1.IKI
* Update dir chooser
* Update launch4j
* Print bs format in -static
* Bug when saving: leftover text in Message column
* Add About button
* Add Exit button
* Add selected count on Save All Selected button
* double-check what the EOF and Audio-end flags mean
* Add WCW to sector test
* Update LoM sector test
* Finish Crusader tests
    . only audio
    . starts near end
    . missing audio chunk
    . missing audio sectors
    . missing video sectors
    . missing video chunk
/?/ Add partial replace tests
* Add unit tests to build.xml
    * Unit tests require Java 6 while jPSXdec is built with Java 5 ...
      can use 2 different Javas in ant?
    * Create unit test subproject?
* Find better dropdown button (test on Mac)
* Experiment with other tree tables (need Mac)
* Create mac app bundle: need a Mac to test!

General
! Findbug fixes
* Replace package.html with package-info.java
* Code coverage/unit testing
    * Make unit tests for the various layers of decoding:
        1) Opening/identifying various disc images
      // 2) Identification of the various sector types
        3) Indexing of the various item types
      /  1) Uncompression of various bitstreams
      /  2) Various ways to decode MDEC streams
/ Translate/localize the GUI and CL text
* Clean up all the TODOs
* write code documentation
* Mac test
? Run unit tests against older versions

Compare
! Compare ffmpeg ycbcr->rgb to PSX ycbcr->rgb
* Compare against PSound
* Compare against XA audio converter http://www.romhacking.net/utilities/894/
* Castlevania seems to have movies with lots of extra frames at the end?
* Compare Tim against various tools out there

Redesign
* Add default to formats and savers
// Localize disc item help
/?/ Change the way video items split audio items: do it after indexing.
  It's conceptually better, and removes Audio indexer from having to know about video frames.
  However, different movie types split movies slightly differently
  And right now its the sectors that are the only game specific logic
  I would need to add game specific indexers
! Finish full .iki handling (UmJammer Lammy .ik2) by detecting variable frame rates
  make them 75 or 150 fps - by checking how much variance there is between frame lengths
// Duplicated frame number in header messes things up (iki)
    * Remove need for frame numbers, and Dredd prebuilt index
    * Just store the frame start sectors for Dredd
    * Make Dredd indexer and Dredd Disc item that subclasses DiscItemVideoStream
? Even when not upsampling chroma, utilize it for PsxYuv->JpgYuv matrix conversion
    ! Test how much difference there is between the two color sets
! Create my own smaller/simpler arg parser
! new parsx lib: String sFile = parser.getStringParam("-f"); .hasHelp()
* Expose logger options
* Have separate DiscItemBuilderGuiFactory to create a gui from a DiscItemBuilder and cache it
* Log when frame rate detection fails
* Command-line selection of parallel audio?
* change xa playback to properly handle static (adjacent sector) streaming
* Bug: Ubuntu: only tree column is white, but text boxes have gray background
* Figure out how to better organize all the RGB and YCbCr pixel formats
* Add -psxfps
* Add tooltips for everything
? Combine [Open & Analyze Disc] with [Open Index]?
? Try to automate the release process
? When displaying progress, setup a timer to only update the display at most every second
? Index doesn't indicate generic type
? More robust contextual CD sector detection
? Add option to save just 1 item allowing to specify name and location
? Is there a better Saving dialog design?
? Cleanup Main (again)
    * Remove FeedbackStream and just use a Logger


User test feedback
* Saving dialog title weird
* Exit program button/menu
* [Save] button not really associated with selection
* More clearly associate list with right panel
? Ignore completely transparent paletted Tims
.....................

Indexing
    * ISO indexer keeps a bit array of all sectors in the CD and flags them as mode 1/2.
      When creating the DiscItemISO9660Files, it checks if the file contains mode 2 sectors
Video encoder
    ! remove/merge redundant MDEC codes with AC=0 (FF7)
    * What to do when partial replace detects the entire frame is different
Real-time media playback/preview
    ! Bug: Audio that starts way before, ends way after, or has long breaks is not handled by player (ff tactics FFTST.STR)
    * Bug: when audio doesn't start for a prolonged period, video frame queue fills and blocks
    * OpenJDK Ubuntu video playback doesn't process frames
    * Oracle Java Ubuntu VM audio auto-starts when it shouldn't
    * Add PlayingState.AT_END
    * Bug: audio playback position is randomly reset by SDK
    * Bug: Player doesn't let you play movie with 1 frame
    /?/ Bug: end of playing race condition locks gui
    /?/ Bug: Player automatically plays video-only content when it is very short
    * Bug: video player repeats prior frames and audio when frame type is not detected
    * Pause video-only playback when reading is delayed
    * Skip audio in the rare case it is behind sector reading
        - Need to address static (sequential sector) audio
    * Change VideoPlayer into PlayerCanvas that also holds the progress bar and control buttons
    * Add choosing of video scaling interpolation option to api
    * [CL] Add command-line options to pick zooming, interpolation, and aspect ratio
    ? Fix it on Linux (Ubuntu) somehow
        x Figure out how to make Linux multithreading not suck
        / Implement my own low-latency audio position tracking
            ? Register listeners with the SourceDataLine and let those events pause the
            other components indirectly
    x Add seeking
? Replicate exact PSX color conversion
    * Reverse engineer IDCT
        Create test movies with -0.5 identity IDCT
            Place single values at various locations in the matrix
            Place two values at various locations in the matrix
    * Reverse engineer YCbCr->RGB
        Create test movies with -0.5 identity IDCT that generate predictable DC coefficients
            Add remaining Cb and Cr values


Indexing
    ? More static data handling
        / Searching for static MDEC data
        ? Searching for static bitstream data
        x Finding and uncompressing lhz data, often used in PSX games
    ? STR indexing: add serialized value: Precise fps:Y/N. When there's no rate variance, then it can be used for -psxfps
    ? Visually populate a list as the disc/file is being indexed
    ? Add list box when indexing that will show the items as they are discovered
    ? Add in a comment what sector types were found during indexing (for debugging)
Video encoder
    ? Split up the partial diff detection from the actual replacing. Helpful for
        . Generating an xml with frames without changes removed
        . GUI preview would be useful to expose this info
    ? add built-in sub-title rendering (ala Jubler)
    ? create movies from scratch
    ? Include Cb/Cr un-swap correction option
      so videos decoded with other programs can be re-encoded with consistent coloring
    x Fancy encoding algorithms
        x Smart chrominance sub-sampling calculation
        x Pre-anti-aliasing and Pre-blockiness reduction
        x Temporal spreading (diffusion?) of quantization error
        x Shorter VLC substitution searching
        x Trellis quantization
        x Context-adaptive variable-length coding (or is this h.264 only?)
? Generate javadoc and post on site
    - How does that affect wiki pages?
    - webdav ant task
? Optimize AviWriter with buffers
    - Construct audio/video chunks in ram before writing
    - Write to buffered stream
/?/ Add LIST:INFO:ISFT to AVI
? Make tutorial on ripping a game and using jpsxdec
* Change visualization to output HTML page
* Save and load ini on every change?
? https://code.google.com/p/xfiledialog/
? Update manual to cover game ripping
? Indexing overhaul:
  Remove all traces of random access and only assume forward access
  Introduce contextual information to help identify sector types
    CD audio sectors will benefit
    Identifying video sectors by combining the frame data along the way and checking if its valid (FF7, Lain, Dredd)
? Finish function "identifySector()" in DiscItem
  to more quickly figure out what type of sectors are read (since it won't
  have to go through the whole list of like 10 types).
? Wield the power of Java: Multi-thread decoding (essentially use the player model)
? Highlight tree items that are checked for saving
? Change sector reading to start by only reading the header, then read remaining as needed
? Add hex viewer for files
? Visualize disc items location in the gui
? Add CD audio detection/extraction
    ? Add CUE/TOC file parsing so the tracks can be identified
? add DiscItemVideo.decodeFrame(int) for quick thumbnailing
? Change package structure to <hosting site>.jpsxdec.*

x Add doxygen to build.xml
    x Make doxygen config
x Bug: Tree music icon is hard to see on blue background

------------------------------------------

? Find new host
    Requirements:
        * free
        ? simple issue tracking (anon bug reports a plus)
        * project name in url
        * clean & simple homepage not focused on the code but on summary and downloads
        * native SVN support (not bridges)
        * 5 or more developers allowed on the project
        * syntax highlighted repo browsing
        * allows non OSI licenses
    http://www.svnhostingcomparison.com/
    ? assembla.com (# of users?, reasonably clean, wiki for a home page, add/remove tabs, bugs called 'tickets') e.g. http://www.assembla.com/spaces/burro
    ? javaforge.com (cluttered) e.g. http://javaforge.com/project/dock
    ? sharesource.org (# of users?, very simple, bug reporting without register, no code highlighting)
    ? activestate.com/firefly/plans (where are the downloads?, # of users?, url is firefly.activestate.com/username/projectname) e.g. http://firefly.activestate.com/ahamino/mindreader  http://firefly.activestate.com/dafi/morekomodo
    ? projectlocker.com (5 users, lots of q's to signup, unable to find a project page on site, has ads)
    ? myversioncontrol.com (3 users, unable to find a project page on site)
    ? bountysource.com
    x Freepository (1 user, svn ok, license ok, no issue tracking)
    x java.net (cluttered) e.g. https://jinput.dev.java.net/
    x codespaces.com (2 users, unable to find a project page on site)
    x xp-dev (project name not in url, no repo browsing)
    x codeplex (best interface, but svn please)
    x googlecode (incompatible license)
    x github (svn please)
    x bitbucket (svn please)
    x launchpad (svn please)

New code style:
    fields only preceeded with underscore '_'
    object no longer have prefix of 'o'
    don't have filename in comment before package name
    arrays of objects will still be 'ao' prefix
    primitive type objects will also still be 'io', 'blno', 'dblo' etc
    nested non-static class fields start with double underscore '__'
    core types prefixes: long=lng int=i short=si byte=b
                         double=dbl float=flt boolean=bln enum=e
    array prefix: a<type> (e.g. int[] = ai)
    arrays always declared type[] name;


