<?xml version="1.0" encoding="UTF-8"?>
<project name="jpsxdec" default="release" basedir=".">

    <!-- Set JAVA_HOME to 1.5 jdk directory before running this build -->

    <description>
        Build jPSXdec for releasing.
    </description>

    <!-- global build properties -->
    <property name="src.dir" location="src"/>
    <property name="src-lgpl.dir" location="src-lgpl"/>
    <property name="test.dir" location="test"/>

    <property name="testbuild.dir" location="test-build"/>
    <property name="build.dir" location="release-build"/>
    <property name="build-lgpl.dir" location="release-build-lgpl"/>
    <property name="dist.dir"  location="release-dist"/>
    <property name="javadoc.dir" location="release-javadoc"/>

    <property name="javac.target.ver" value="1.5"/>
    <property name="javac.source.ver" value="1.5" />
    
    <property name="jar.file" value="jpsxdec.jar" />
    <property name="jar-lgpl.file" value="jpsxdec-lib.jar" />

    <property name="main.class" value="jpsxdec.Main" />

    <property name="resource.include.glob" value="**/*.dat,**/*.properties,**/*.png,**/*.gif" />
    <fileset dir="." id="release.include.files">
        <include name="doc/CHANGES.txt" />
        <include name="doc/CREDITS.txt" />
        <include name="doc/lgpl-2.1.txt" />
        <include name="doc/apache-2.0.txt" />
        <include name="doc/CDDL-GPL-2-CP.txt" />
        <include name="doc/LICENSE.txt" />
        <include name="jpsxdec.exe" />
    </fileset>

    <target name="init">
        <echo message="Be sure to set JAVA_HOME to 1.5 jdk directory before building." />
    </target>

    <target name="compile" depends="init" description="compile the source" >
        <!-- Compile the java code in root source dirs, intermingling the .class files -->
        <!-- In order to keep the class files separate so they can be grouped 
             into separate jars, we can't specify a separate build directory -->
        <javac srcdir="${src.dir}:${src-lgpl.dir}"
            source="${javac.source.ver}" target="${javac.target.ver}"
            encoding="UTF8" debug="true" />
            
        <!-- I don't want those class files littering the sources, so get them out immediately.
             Unfortunately javac won't be able to do incremental builds because of this. -->
        <move-class-copy-resources src.dir="${src.dir}" build.dir="${build.dir}" />
        <move-class-copy-resources src.dir="${src-lgpl.dir}" build.dir="${build-lgpl.dir}" />
    </target>
    
    <macrodef name="move-class-copy-resources">
        <attribute name="src.dir"/>
        <attribute name="build.dir"/>
        <sequential>
            <move todir="@{build.dir}" overwrite="true">
                <fileset dir="@{src.dir}">
                    <include name="**/*.class"/>
                </fileset>
            </move>
            <copy todir="@{build.dir}" verbose="true">
                <fileset dir="@{src.dir}" includes="${resource.include.glob}" />
            </copy>
        </sequential>
    </macrodef>
    

    <target name="release" depends="compile" description="generate the distribution" >
    
        <!-- Create the distribution directory -->
        <mkdir dir="${dist.dir}"/>

        <!-- Create the main jar -->
        <jar jarfile="${dist.dir}/${jar.file}" basedir="${build.dir}" compress="true">
            <manifest>
                <attribute name="Class-Path" value="${jar-lgpl.file}"/>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
        
        <!-- Create the lgpl jar -->
        <jar destfile="${dist.dir}/${jar-lgpl.file}" basedir="${build-lgpl.dir}" compress="true" />

        <!-- Copy over the distribution files -->
        <copy todir="${dist.dir}" verbose="true">
            <fileset refid="release.include.files" />
        </copy>
        
        <echo message="TODO: Manually create PDF of manual using Libre/OpenOffice"/>
    </target>

    <target name="test" depends="release">
        <mkdir dir="${testbuild.dir}"/>
        <javac srcdir="${test.dir}" destdir="${testbuild.dir}" debug="true"
               classpath=""
               source="1.6" target="1.6" />
        <junit printsummary="yes" haltonfailure="yes">
            <classpath>
                <pathelement location="${testbuild.dir}"/>
                <pathelement location="${build.dir}"/>
                <pathelement location="${build-lgpl.dir}"/>
            </classpath>
            <test name="AllTestsSuite"/>
        </junit>
    </target>

    <target name="javadoc" description="generate code documentation via javadoc">
        <javadoc additionalparam="-stylesheetfile javadoc.css" charset="UTF-8"
                destdir="${javadoc.dir}" docencoding="UTF-8" failonerror="true"
                private="true" use="true" windowtitle="jPSXdec" useexternalfile="true">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <fileset dir="${src.dir}">
                <filename name="**/*.java"/>
            </fileset>
            <fileset dir="${src-lgpl.dir}">
                <filename name="**/*.java"/>
            </fileset>
        </javadoc>
    </target>
    
    <target name="clean" description="clean up" >
        <!-- Delete the build and dist directories -->
        <delete dir="${build.dir}"/>
        <delete dir="${build-lgpl.dir}"/>
        <delete dir="${dist.dir}"/>
        <!-- Also clear out any leftover class files in case there was an error -->
        <delete>
            <fileset dir="${src.dir}" includes="**/*.class" />
        </delete>
        <delete>
            <fileset dir="${src-lgpl.dir}" includes="**/*.class" />
        </delete>
    </target>

</project>
