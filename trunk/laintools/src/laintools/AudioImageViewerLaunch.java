/*
 * LainTools: PSX Serial Experiments Lain Hacking and Translation Tools
 * Copyright (C) 2012-2013  Michael Sabin
 *
 * Redistribution and use of the LainTools code or any derivative works are
 * permitted provided that the following conditions are met:
 *
 *  * Redistributions may not be sold, nor may they be used in commercial
 *    or revenue-generating business activities.
 *
 *  * Redistributions that are modified from the original source must
 *    include the complete source code, including the source code for all
 *    components used by a binary built from the modified sources. However, as
 *    a special exception, the source code distributed need not include
 *    anything that is normally distributed (in either source or binary form)
 *    with the major components (compiler, kernel, and so on) of the operating
 *    system on which the executable runs, unless that component itself
 *    accompanies the executable.
 *
 *  * Redistributions must reproduce the above copyright notice, this list
 *    of conditions and the following disclaimer in the documentation and/or
 *    other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package laintools;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import jpsxdec.gui.BetterFileChooser;
import jpsxdec.gui.GuiFileFilters;
import org.ini4j.Ini;
import org.ini4j.Profile.Section;


public class AudioImageViewerLaunch extends javax.swing.JFrame {

    
    public static class FilePromptSettings {
        private String _sSlpsFile = new File("SLPS_016.03").getAbsolutePath();
        private String _sSiteAFile = new File("SITEA.BIN").getAbsolutePath();
        private String _sSiteBFile = new File("SITEB.BIN").getAbsolutePath();

        public FilePromptSettings() {
        }
        
        public FilePromptSettings(String _sSlpsFile, String _sSiteAFile, String _sSiteBFile) {
            this._sSlpsFile = _sSlpsFile;
            this._sSiteAFile = _sSiteAFile;
            this._sSiteBFile = _sSiteBFile;
        }

        public String getSiteAFile() { return _sSiteAFile; }
        public void setSiteAFile(String _sSiteAFile) { this._sSiteAFile = _sSiteAFile; }
        public String getSiteBFile() { return _sSiteBFile; }
        public void setSiteBFile(String _sSiteBFile) { this._sSiteBFile = _sSiteBFile; }
        public String getSlpsFile() { return _sSlpsFile; }
        public void setSlpsFile(String _sSlpsFile) { this._sSlpsFile = _sSlpsFile; }
    }
    
    private static final File SETTINGS = new File("FilePromptOptions.ini");
    
    /**
     * Creates new form FilePrompt
     */
    public AudioImageViewerLaunch() {
        initComponents();
        
        // center the gui
        this.setLocationRelativeTo(null);
        
        FilePromptSettings settings = new FilePromptSettings();
        
        if (SETTINGS.exists()) {
            try {
                Ini ini = new Ini(SETTINGS);
                Section section = ini.get("FilePromptSettings");
                section.to(settings);
            } catch (IOException ex) {
                Logger.getLogger(AudioImageViewerLaunch.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        _guiSlpsFile.setText(settings.getSlpsFile());
        _guiSiteAFile.setText(settings.getSiteAFile());
        _guiSiteBFile.setText(settings.getSiteBFile());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        _guiSlpsLbl = new javax.swing.JLabel();
        _guiSlpsFile = new javax.swing.JTextField();
        _guiSlpsBtn = new javax.swing.JButton();
        _guiSiteALbl = new javax.swing.JLabel();
        _guiSiteAFile = new javax.swing.JTextField();
        _guiSiteABtn = new javax.swing.JButton();
        _guiSiteBLbl = new javax.swing.JLabel();
        _guiSiteBFile = new javax.swing.JTextField();
        _guiSiteBBtn = new javax.swing.JButton();
        _guiOpenViewer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
        layout.columnWidths = new int[] {0, 500, 0};
        getContentPane().setLayout(layout);

        _guiSlpsLbl.setText("SLPS_016.0*");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        getContentPane().add(_guiSlpsLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(_guiSlpsFile, gridBagConstraints);

        _guiSlpsBtn.setText("Open...");
        _guiSlpsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _guiSlpsBtnActionPerformed(evt);
            }
        });
        getContentPane().add(_guiSlpsBtn, new java.awt.GridBagConstraints());

        _guiSiteALbl.setText("SITEA.BIN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        getContentPane().add(_guiSiteALbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(_guiSiteAFile, gridBagConstraints);

        _guiSiteABtn.setText("Open...");
        _guiSiteABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _guiSiteABtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        getContentPane().add(_guiSiteABtn, gridBagConstraints);

        _guiSiteBLbl.setText("SITEB.BIN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        getContentPane().add(_guiSiteBLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(_guiSiteBFile, gridBagConstraints);

        _guiSiteBBtn.setText("Open...");
        _guiSiteBBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _guiSiteBBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        getContentPane().add(_guiSiteBBtn, gridBagConstraints);

        _guiOpenViewer.setText("Open viewer");
        _guiOpenViewer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _guiOpenViewerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        getContentPane().add(_guiOpenViewer, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Ini ini = new Ini();
        Section section = ini.add("FilePromptSettings");
        FilePromptSettings settings = new FilePromptSettings(
                                            _guiSlpsFile.getText(),
                                            _guiSiteAFile.getText(),
                                            _guiSiteBFile.getText());
        section.from(settings);
        try {
            ini.store(SETTINGS);
        } catch (IOException ex) {
            Logger.getLogger(AudioImageViewerLaunch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void _guiSlpsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__guiSlpsBtnActionPerformed
        openFile(_guiSlpsFile, "SLPS_016.0*");
    }//GEN-LAST:event__guiSlpsBtnActionPerformed

    private void _guiSiteABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__guiSiteABtnActionPerformed
        openFile(_guiSiteAFile, "SITEA.BIN");
    }//GEN-LAST:event__guiSiteABtnActionPerformed

    private void _guiSiteBBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__guiSiteBBtnActionPerformed
        openFile(_guiSiteBFile, "SITEB.BIN");
    }//GEN-LAST:event__guiSiteBBtnActionPerformed

    private void _guiOpenViewerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__guiOpenViewerActionPerformed
        try {
            AudioImageViewer viewer = new AudioImageViewer(
                                                _guiSlpsFile.getText(),
                                                _guiSiteAFile.getText(),
                                                _guiSiteBFile.getText());
            this.setVisible(false);
            viewer.setVisible(true);
            this.dispose();
        } catch (IOException ex) {
            Logger.getLogger(AudioImageViewerLaunch.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex);
        }
        
    }//GEN-LAST:event__guiOpenViewerActionPerformed

    private void openFile(JTextField field, String sTitle) {
        File f = new File(field.getText());
        File parent = f.getParentFile();
        if (parent == null)
            parent = new File(".");
        BetterFileChooser fc = new BetterFileChooser(parent);
        fc.setDialogTitle(sTitle);
        int iResult = fc.showOpenDialog(this);
        if (iResult != BetterFileChooser.APPROVE_OPTION)
            return;
        field.setText(fc.getSelectedFile().toString());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AudioImageViewerLaunch().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton _guiOpenViewer;
    private javax.swing.JButton _guiSiteABtn;
    private javax.swing.JTextField _guiSiteAFile;
    private javax.swing.JLabel _guiSiteALbl;
    private javax.swing.JButton _guiSiteBBtn;
    private javax.swing.JTextField _guiSiteBFile;
    private javax.swing.JLabel _guiSiteBLbl;
    private javax.swing.JButton _guiSlpsBtn;
    private javax.swing.JTextField _guiSlpsFile;
    private javax.swing.JLabel _guiSlpsLbl;
    // End of variables declaration//GEN-END:variables
}
